/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is Mozilla Universal charset detector code.
 *
 * The Initial Developer of the Original Code is
 * Netscape Communications Corporation.
 * Portions created by the Initial Developer are Copyright (C) 2001
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *          Shy Shalom <shooshX@gmail.com>
 *          Rudi Pettazzi <rudi.pettazzi@gmail.com> (C# port)
 * 
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

using System;

namespace Ude.NetStandard;

internal abstract class JapaneseContextAnalyser
{
    private const int CATEGORIES_NUM = 6;
    private const int ENOUGH_REL_THRESHOLD = 100;
    private const int MAX_REL_THRESHOLD = 1000;
    private const int MINIMUM_DATA_THRESHOLD = 4;
    private const float DONT_KNOW = -1.0f;

    // hiragana frequency category table
    // This is hiragana 2-char sequence table, the number in each cell represents its frequency category
    /* Original uncompressed:
    private static readonly byte[,] _jp2CharContext = {
        { 0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1 },
        { 2,4,0,4,0,3,0,4,0,3,4,4,4,2,4,3,3,4,3,2,3,3,4,2,3,3,3,2,4,1,4,3,3,1,5,4,3,4,3,4,3,5,3,0,3,5,4,2,0,3,1,0,3,3,0,3,3,0,1,1,0,4,3,0,3,3,0,4,0,2,0,3,5,5,5,5,4,0,4,1,0,3,4 },
        { 0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2 },
        { 0,4,0,5,0,5,0,4,0,4,5,4,4,3,5,3,5,1,5,3,4,3,4,4,3,4,3,3,4,3,5,4,4,3,5,5,3,5,5,5,3,5,5,3,4,5,5,3,1,3,2,0,3,4,0,4,2,0,4,2,1,5,3,2,3,5,0,4,0,2,0,5,4,4,5,4,5,0,4,0,0,4,4 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,3,0,4,0,3,0,3,0,4,5,4,3,3,3,3,4,3,5,4,4,3,5,4,4,3,4,3,4,4,4,4,5,3,4,4,3,4,5,5,4,5,5,1,4,5,4,3,0,3,3,1,3,3,0,4,4,0,3,3,1,5,3,3,3,5,0,4,0,3,0,4,4,3,4,3,3,0,4,1,1,3,4 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,4,0,3,0,3,0,4,0,3,4,4,3,2,2,1,2,1,3,1,3,3,3,3,3,4,3,1,3,3,5,3,3,0,4,3,0,5,4,3,3,5,4,4,3,4,4,5,0,1,2,0,1,2,0,2,2,0,1,0,0,5,2,2,1,4,0,3,0,1,0,4,4,3,5,4,3,0,2,1,0,4,3 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,3,0,5,0,4,0,2,1,4,4,2,4,1,4,2,4,2,4,3,3,3,4,3,3,3,3,1,4,2,3,3,3,1,4,4,1,1,1,4,3,3,2,0,2,4,3,2,0,3,3,0,3,1,1,0,0,0,3,3,0,4,2,2,3,4,0,4,0,3,0,4,4,5,3,4,4,0,3,0,0,1,4 },
        { 1,4,0,4,0,4,0,4,0,3,5,4,4,3,4,3,5,4,3,3,4,3,5,4,4,4,4,3,4,2,4,3,3,1,5,4,3,2,4,5,4,5,5,4,4,5,4,4,0,3,2,2,3,3,0,4,3,1,3,2,1,4,3,3,4,5,0,3,0,2,0,4,5,5,4,5,4,0,4,0,0,5,4 },
        { 0,5,0,5,0,4,0,3,0,4,4,3,4,3,3,3,4,0,4,4,4,3,4,3,4,3,3,1,4,2,4,3,4,0,5,4,1,4,5,4,4,5,3,2,4,3,4,3,2,4,1,3,3,3,2,3,2,0,4,3,3,4,3,3,3,4,0,4,0,3,0,4,5,4,4,4,3,0,4,1,0,1,3 },
        { 0,3,1,4,0,3,0,2,0,3,4,4,3,1,4,2,3,3,4,3,4,3,4,3,4,4,3,2,3,1,5,4,4,1,4,4,3,5,4,4,3,5,5,4,3,4,4,3,1,2,3,1,2,2,0,3,2,0,3,1,0,5,3,3,3,4,3,3,3,3,4,4,4,4,5,4,2,0,3,3,2,4,3 },
        { 0,2,0,3,0,1,0,1,0,0,3,2,0,0,2,0,1,0,2,1,3,3,3,1,2,3,1,0,1,0,4,2,1,1,3,3,0,4,3,3,1,4,3,3,0,3,3,2,0,0,0,0,1,0,0,2,0,0,0,0,0,4,1,0,2,3,2,2,2,1,3,3,3,4,4,3,2,0,3,1,0,3,3 },
        { 0,4,0,4,0,3,0,3,0,4,4,4,3,3,3,3,3,3,4,3,4,2,4,3,4,3,3,2,4,3,4,5,4,1,4,5,3,5,4,5,3,5,4,0,3,5,5,3,1,3,3,2,2,3,0,3,4,1,3,3,2,4,3,3,3,4,0,4,0,3,0,4,5,4,4,5,3,0,4,1,0,3,4 },
        { 0,2,0,3,0,3,0,0,0,2,2,2,1,0,1,0,0,0,3,0,3,0,3,0,1,3,1,0,3,1,3,3,3,1,3,3,3,0,1,3,1,3,4,0,0,3,1,1,0,3,2,0,0,0,0,1,3,0,1,0,0,3,3,2,0,3,0,0,0,0,0,3,4,3,4,3,3,0,3,0,0,2,3 },
        { 2,3,0,3,0,2,0,1,0,3,3,4,3,1,3,1,1,1,3,1,4,3,4,3,3,3,0,0,3,1,5,4,3,1,4,3,2,5,5,4,4,4,4,3,3,4,4,4,0,2,1,1,3,2,0,1,2,0,0,1,0,4,1,3,3,3,0,3,0,1,0,4,4,4,5,5,3,0,2,0,0,4,4 },
        { 0,2,0,1,0,3,1,3,0,2,3,3,3,0,3,1,0,0,3,0,3,2,3,1,3,2,1,1,0,0,4,2,1,0,2,3,1,4,3,2,0,4,4,3,1,3,1,3,0,1,0,0,1,0,0,0,1,0,0,0,0,4,1,1,1,2,0,3,0,0,0,3,4,2,4,3,2,0,1,0,0,3,3 },
        { 0,1,0,4,0,5,0,4,0,2,4,4,2,3,3,2,3,3,5,3,3,3,4,3,4,2,3,0,4,3,3,3,4,1,4,3,2,1,5,5,3,4,5,1,3,5,4,2,0,3,3,0,1,3,0,4,2,0,1,3,1,4,3,3,3,3,0,3,0,1,0,3,4,4,4,5,5,0,3,0,1,4,5 },
        { 0,2,0,3,0,3,0,0,0,2,3,1,3,0,4,0,1,1,3,0,3,4,3,2,3,1,0,3,3,2,3,1,3,0,2,3,0,2,1,4,1,2,2,0,0,3,3,0,0,2,0,0,0,1,0,0,0,0,2,2,0,3,2,1,3,3,0,2,0,2,0,0,3,3,1,2,4,0,3,0,2,2,3 },
        { 2,4,0,5,0,4,0,4,0,2,4,4,4,3,4,3,3,3,1,2,4,3,4,3,4,4,5,0,3,3,3,3,2,0,4,3,1,4,3,4,1,4,4,3,3,4,4,3,1,2,3,0,4,2,0,4,1,0,3,3,0,4,3,3,3,4,0,4,0,2,0,3,5,3,4,5,2,0,3,0,0,4,5 },
        { 0,3,0,4,0,1,0,1,0,1,3,2,2,1,3,0,3,0,2,0,2,0,3,0,2,0,0,0,1,0,1,1,0,0,3,1,0,0,0,4,0,3,1,0,2,1,3,0,0,0,0,0,0,3,0,0,0,0,0,0,0,4,2,2,3,1,0,3,0,0,0,1,4,4,4,3,0,0,4,0,0,1,4 },
        { 1,4,1,5,0,3,0,3,0,4,5,4,4,3,5,3,3,4,4,3,4,1,3,3,3,3,2,1,4,1,5,4,3,1,4,4,3,5,4,4,3,5,4,3,3,4,4,4,0,3,3,1,2,3,0,3,1,0,3,3,0,5,4,4,4,4,4,4,3,3,5,4,4,3,3,5,4,0,3,2,0,4,4 },
        { 0,2,0,3,0,1,0,0,0,1,3,3,3,2,4,1,3,0,3,1,3,0,2,2,1,1,0,0,2,0,4,3,1,0,4,3,0,4,4,4,1,4,3,1,1,3,3,1,0,2,0,0,1,3,0,0,0,0,2,0,0,4,3,2,4,3,5,4,3,3,3,4,3,3,4,3,3,0,2,1,0,3,3 },
        { 0,2,0,4,0,3,0,2,0,2,5,5,3,4,4,4,4,1,4,3,3,0,4,3,4,3,1,3,3,2,4,3,0,3,4,3,0,3,4,4,2,4,4,0,4,5,3,3,2,2,1,1,1,2,0,1,5,0,3,3,2,4,3,3,3,4,0,3,0,2,0,4,4,3,5,5,0,0,3,0,2,3,3 },
        { 0,3,0,4,0,3,0,1,0,3,4,3,3,1,3,3,3,0,3,1,3,0,4,3,3,1,1,0,3,0,3,3,0,0,4,4,0,1,5,4,3,3,5,0,3,3,4,3,0,2,0,1,1,1,0,1,3,0,1,2,1,3,3,2,3,3,0,3,0,1,0,1,3,3,4,4,1,0,1,2,2,1,3 },
        { 0,1,0,4,0,4,0,3,0,1,3,3,3,2,3,1,1,0,3,0,3,3,4,3,2,4,2,0,1,0,4,3,2,0,4,3,0,5,3,3,2,4,4,4,3,3,3,4,0,1,3,0,0,1,0,0,1,0,0,0,0,4,2,3,3,3,0,3,0,0,0,4,4,4,5,3,2,0,3,3,0,3,5 },
        { 0,2,0,3,0,0,0,3,0,1,3,0,2,0,0,0,1,0,3,1,1,3,3,0,0,3,0,0,3,0,2,3,1,0,3,1,0,3,3,2,0,4,2,2,0,2,0,0,0,4,0,0,0,0,0,0,0,0,0,0,0,2,1,2,0,1,0,1,0,0,0,1,3,1,2,0,0,0,1,0,0,1,4 },
        { 0,3,0,3,0,5,0,1,0,2,4,3,1,3,3,2,1,1,5,2,1,0,5,1,2,0,0,0,3,3,2,2,3,2,4,3,0,0,3,3,1,3,3,0,2,5,3,4,0,3,3,0,1,2,0,2,2,0,3,2,0,2,2,3,3,3,0,2,0,1,0,3,4,4,2,5,4,0,3,0,0,3,5 },
        { 0,3,0,3,0,3,0,1,0,3,3,3,3,0,3,0,2,0,2,1,1,0,2,0,1,0,0,0,2,1,0,0,1,0,3,2,0,0,3,3,1,2,3,1,0,3,3,0,0,1,0,0,0,0,0,2,0,0,0,0,0,2,3,1,2,3,0,3,0,1,0,3,2,1,0,4,3,0,1,1,0,3,3 },
        { 0,4,0,5,0,3,0,3,0,4,5,5,4,3,5,3,4,3,5,3,3,2,5,3,4,4,4,3,4,3,4,5,5,3,4,4,3,4,4,5,4,4,4,3,4,5,5,4,2,3,4,2,3,4,0,3,3,1,4,3,2,4,3,3,5,5,0,3,0,3,0,5,5,5,5,4,4,0,4,0,1,4,4 },
        { 0,4,0,4,0,3,0,3,0,3,5,4,4,2,3,2,5,1,3,2,5,1,4,2,3,2,3,3,4,3,3,3,3,2,5,4,1,3,3,5,3,4,4,0,4,4,3,1,1,3,1,0,2,3,0,2,3,0,3,0,0,4,3,1,3,4,0,3,0,2,0,4,4,4,3,4,5,0,4,0,0,3,4 },
        { 0,3,0,3,0,3,1,2,0,3,4,4,3,3,3,0,2,2,4,3,3,1,3,3,3,1,1,0,3,1,4,3,2,3,4,4,2,4,4,4,3,4,4,3,2,4,4,3,1,3,3,1,3,3,0,4,1,0,2,2,1,4,3,2,3,3,5,4,3,3,5,4,4,3,3,0,4,0,3,2,2,4,4 },
        { 0,2,0,1,0,0,0,0,0,1,2,1,3,0,0,0,0,0,2,0,1,2,1,0,0,1,0,0,0,0,3,0,0,1,0,1,1,3,1,0,0,0,1,1,0,1,1,0,0,0,0,0,2,0,0,0,0,0,0,0,0,1,1,2,2,0,3,4,0,0,0,1,1,0,0,1,0,0,0,0,0,1,1 },
        { 0,1,0,0,0,1,0,0,0,0,4,0,4,1,4,0,3,0,4,0,3,0,4,0,3,0,3,0,4,1,5,1,4,0,0,3,0,5,0,5,2,0,1,0,0,0,2,1,4,0,1,3,0,0,3,0,0,3,1,1,4,1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0 },
        { 1,4,0,5,0,3,0,2,0,3,5,4,4,3,4,3,5,3,4,3,3,0,4,3,3,3,3,3,3,2,4,4,3,1,3,4,4,5,4,4,3,4,4,1,3,5,4,3,3,3,1,2,2,3,3,1,3,1,3,3,3,5,3,3,4,5,0,3,0,3,0,3,4,3,4,4,3,0,3,0,2,4,3 },
        { 0,1,0,4,0,0,0,0,0,1,4,0,4,1,4,2,4,0,3,0,1,0,1,0,0,0,0,0,2,0,3,1,1,1,0,3,0,0,0,1,2,1,0,0,1,1,1,1,0,1,0,0,0,1,0,0,3,0,0,0,0,3,2,0,2,2,0,1,0,0,0,2,3,2,3,3,0,0,0,0,2,1,0 },
        { 0,5,1,5,0,3,0,3,0,5,4,4,5,1,5,3,3,0,4,3,4,3,5,3,4,3,3,2,4,3,4,3,3,0,3,3,1,4,4,3,4,4,4,3,4,5,5,3,2,3,1,1,3,3,1,3,1,1,3,3,2,4,5,3,3,5,0,4,0,3,0,4,4,3,5,3,3,0,3,4,0,4,3 },
        { 0,5,0,5,0,3,0,2,0,4,4,3,5,2,4,3,3,3,4,4,4,3,5,3,5,3,3,1,4,0,4,3,3,0,3,3,0,4,4,4,4,5,4,3,3,5,5,3,2,3,1,2,3,2,0,1,0,0,3,2,2,4,4,3,1,5,0,4,0,3,0,4,3,1,3,2,1,0,3,3,0,3,3 },
        { 0,4,0,5,0,5,0,4,0,4,5,5,5,3,4,3,3,2,5,4,4,3,5,3,5,3,4,0,4,3,4,4,3,2,4,4,3,4,5,4,4,5,5,0,3,5,5,4,1,3,3,2,3,3,1,3,1,0,4,3,1,4,4,3,4,5,0,4,0,2,0,4,3,4,4,3,3,0,4,0,0,5,5 },
        { 0,4,0,4,0,5,0,1,1,3,3,4,4,3,4,1,3,0,5,1,3,0,3,1,3,1,1,0,3,0,3,3,4,0,4,3,0,4,4,4,3,4,4,0,3,5,4,1,0,3,0,0,2,3,0,3,1,0,3,1,0,3,2,1,3,5,0,3,0,1,0,3,2,3,3,4,4,0,2,2,0,4,4 },
        { 2,4,0,5,0,4,0,3,0,4,5,5,4,3,5,3,5,3,5,3,5,2,5,3,4,3,3,4,3,4,5,3,2,1,5,4,3,2,3,4,5,3,4,1,2,5,4,3,0,3,3,0,3,2,0,2,3,0,4,1,0,3,4,3,3,5,0,3,0,1,0,4,5,5,5,4,3,0,4,2,0,3,5 },
        { 0,5,0,4,0,4,0,2,0,5,4,3,4,3,4,3,3,3,4,3,4,2,5,3,5,3,4,1,4,3,4,4,4,0,3,5,0,4,4,4,4,5,3,1,3,4,5,3,3,3,3,3,3,3,0,2,2,0,3,3,2,4,3,3,3,5,3,4,1,3,3,5,3,2,0,0,0,0,4,3,1,3,3 },
        { 0,1,0,3,0,3,0,1,0,1,3,3,3,2,3,3,3,0,3,0,0,0,3,1,3,0,0,0,2,2,2,3,0,0,3,2,0,1,2,4,1,3,3,0,0,3,3,3,0,1,0,0,2,1,0,0,3,0,3,1,0,3,0,0,1,3,0,2,0,1,0,3,3,1,3,3,0,0,1,1,0,3,3 },
        { 0,2,0,3,0,2,1,4,0,2,2,3,1,1,3,1,1,0,2,0,3,1,2,3,1,3,0,0,1,0,4,3,2,3,3,3,1,4,2,3,3,3,3,1,0,3,1,4,0,1,1,0,1,2,0,1,1,0,1,1,0,3,1,3,2,2,0,1,0,0,0,2,3,3,3,1,0,0,0,0,0,2,3 },
        { 0,5,0,4,0,5,0,2,0,4,5,5,3,3,4,3,3,1,5,4,4,2,4,4,4,3,4,2,4,3,5,5,4,3,3,4,3,3,5,5,4,5,5,1,3,4,5,3,1,4,3,1,3,3,0,3,3,1,4,3,1,4,5,3,3,5,0,4,0,3,0,5,3,3,1,4,3,0,4,0,1,5,3 },
        { 0,5,0,5,0,4,0,2,0,4,4,3,4,3,3,3,3,3,5,4,4,4,4,4,4,5,3,3,5,2,4,4,4,3,4,4,3,3,4,4,5,5,3,3,4,3,4,3,3,4,3,3,3,3,1,2,2,1,4,3,3,5,4,4,3,4,0,4,0,3,0,4,4,4,4,4,1,0,4,2,0,2,4 },
        { 0,4,0,4,0,3,0,1,0,3,5,2,3,0,3,0,2,1,4,2,3,3,4,1,4,3,3,2,4,1,3,3,3,0,3,3,0,0,3,3,3,5,3,3,3,3,3,2,0,2,0,0,2,0,0,2,0,0,1,0,0,3,1,2,2,3,0,3,0,2,0,4,4,3,3,4,1,0,3,0,0,2,4 },
        { 0,0,0,4,0,0,0,0,0,0,1,0,1,0,2,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0,3,1,3,0,3,2,0,0,0,1,0,3,2,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,4,0,2,0,0,0,0,0,0,2 },
        { 0,2,1,3,0,2,0,2,0,3,3,3,3,1,3,1,3,3,3,3,3,3,4,2,2,1,2,1,4,0,4,3,1,3,3,3,2,4,3,5,4,3,3,3,3,3,3,3,0,1,3,0,2,0,0,1,0,0,1,0,0,4,2,0,2,3,0,3,3,0,3,3,4,2,3,1,4,0,1,2,0,2,3 },
        { 0,3,0,3,0,1,0,3,0,2,3,3,3,0,3,1,2,0,3,3,2,3,3,2,3,2,3,1,3,0,4,3,2,0,3,3,1,4,3,3,2,3,4,3,1,3,3,1,1,0,1,1,0,1,0,1,0,1,0,0,0,4,1,1,0,3,0,3,1,0,2,3,3,3,3,3,1,0,0,2,0,3,3 },
        { 0,0,0,0,0,0,0,0,0,0,3,0,2,0,3,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3,0,3,0,3,1,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,2,0,2,3,0,0,0,0,0,0,0,0,3 },
        { 0,2,0,3,1,3,0,3,0,2,3,3,3,1,3,1,3,1,3,1,3,3,3,1,3,0,2,3,1,1,4,3,3,2,3,3,1,2,2,4,1,3,3,0,1,4,2,3,0,1,3,0,3,0,0,1,3,0,2,0,0,3,3,2,1,3,0,3,0,2,0,3,4,4,4,3,1,0,3,0,0,3,3 },
        { 0,2,0,1,0,2,0,0,0,1,3,2,2,1,3,0,1,1,3,0,3,2,3,1,2,0,2,0,1,1,3,3,3,0,3,3,1,1,2,3,2,3,3,1,2,3,2,0,0,1,0,0,0,0,0,0,3,0,1,0,0,2,1,2,1,3,0,3,0,0,0,3,4,4,4,3,2,0,2,0,0,2,4 },
        { 0,0,0,1,0,1,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,2,2,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,1,3,1,0,0,0,0,0,0,0,3 },
        { 0,3,0,3,0,2,0,3,0,3,3,3,2,3,2,2,2,0,3,1,3,3,3,2,3,3,0,0,3,0,3,2,2,0,2,3,1,4,3,4,3,3,2,3,1,5,4,4,0,3,1,2,1,3,0,3,1,1,2,0,2,3,1,3,1,3,0,3,0,1,0,3,3,4,4,2,1,0,2,1,0,2,4 },
        { 0,1,0,3,0,1,0,2,0,1,4,2,5,1,4,0,2,0,2,1,3,1,4,0,2,1,0,0,2,1,4,1,1,0,3,3,0,5,1,3,2,3,3,1,0,3,2,3,0,1,0,0,0,0,0,0,1,0,0,0,0,4,0,1,0,3,0,2,0,1,0,3,3,3,4,3,3,0,0,0,0,2,3 },
        { 0,0,0,1,0,0,0,0,0,0,2,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,0,0,1,0,0,0,0,0,3 },
        { 0,1,0,3,0,4,0,3,0,2,4,3,1,0,3,2,2,1,3,1,2,2,3,1,1,1,2,1,3,0,1,2,0,1,3,2,1,3,0,5,5,1,0,0,1,3,2,1,0,3,0,0,1,0,0,0,0,0,3,4,0,1,1,1,3,2,0,2,0,1,0,2,3,3,1,2,3,0,1,0,1,0,4 },
        { 0,0,0,1,0,3,0,3,0,2,2,1,0,0,4,0,3,0,3,1,3,0,3,0,3,0,1,0,3,0,3,1,3,0,3,3,0,0,1,2,1,1,1,0,1,2,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,2,2,1,2,0,0,2,0,0,0,0,2,3,3,3,3,0,0,0,0,1,4 },
        { 0,0,0,3,0,3,0,0,0,0,3,1,1,0,3,0,1,0,2,0,1,0,0,0,0,0,0,0,1,0,3,0,2,0,2,3,0,0,2,2,3,1,2,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,2,0,0,0,0,2,3 },
        { 2,4,0,5,0,5,0,4,0,3,4,3,3,3,4,3,3,3,4,3,4,4,5,4,5,5,5,2,3,0,5,5,4,1,5,4,3,1,5,4,3,4,4,3,3,4,3,3,0,3,2,0,2,3,0,3,0,0,3,3,0,5,3,2,3,3,0,3,0,3,0,3,4,5,4,5,3,0,4,3,0,3,4 },
        { 0,3,0,3,0,3,0,3,0,3,3,4,3,2,3,2,3,0,4,3,3,3,3,3,3,3,3,0,3,2,4,3,3,1,3,4,3,4,4,4,3,4,4,3,2,4,4,1,0,2,0,0,1,1,0,2,0,0,3,1,0,5,3,2,1,3,0,3,0,1,2,4,3,2,4,3,3,0,3,2,0,4,4 },
        { 0,3,0,3,0,1,0,0,0,1,4,3,3,2,3,1,3,1,4,2,3,2,4,2,3,4,3,0,2,2,3,3,3,0,3,3,3,0,3,4,1,3,3,0,3,4,3,3,0,1,1,0,1,0,0,0,4,0,3,0,0,3,1,2,1,3,0,4,0,1,0,4,3,3,4,3,3,0,2,0,0,3,3 },
        { 0,3,0,4,0,1,0,3,0,3,4,3,3,0,3,3,3,1,3,1,3,3,4,3,3,3,0,0,3,1,5,3,3,1,3,3,2,5,4,3,3,4,5,3,2,5,3,4,0,1,0,0,0,0,0,2,0,0,1,1,0,4,2,2,1,3,0,3,0,2,0,4,4,3,5,3,2,0,1,1,0,3,4 },
        { 0,5,0,4,0,5,0,2,0,4,4,3,3,2,3,3,3,1,4,3,4,1,5,3,4,3,4,0,4,2,4,3,4,1,5,4,0,4,4,4,4,5,4,1,3,5,4,2,1,4,1,1,3,2,0,3,1,0,3,2,1,4,3,3,3,4,0,4,0,3,0,4,4,4,3,3,3,0,4,2,0,3,4 },
        { 1,4,0,4,0,3,0,1,0,3,3,3,1,1,3,3,2,2,3,3,1,0,3,2,2,1,2,0,3,1,2,1,2,0,3,2,0,2,2,3,3,4,3,0,3,3,1,2,0,1,1,3,1,2,0,0,3,0,1,1,0,3,2,2,3,3,0,3,0,0,0,2,3,3,4,3,3,0,1,0,0,1,4 },
        { 0,4,0,4,0,4,0,0,0,3,4,4,3,1,4,2,3,2,3,3,3,1,4,3,4,0,3,0,4,2,3,3,2,2,5,4,2,1,3,4,3,4,3,1,3,3,4,2,0,2,1,0,3,3,0,0,2,0,3,1,0,4,4,3,4,3,0,4,0,1,0,2,4,4,4,4,4,0,3,2,0,3,3 },
        { 0,0,0,1,0,4,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,0,3,2,0,0,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,2 },
        { 0,2,0,3,0,4,0,4,0,1,3,3,3,0,4,0,2,1,2,1,1,1,2,0,3,1,1,0,1,0,3,1,0,0,3,3,2,0,1,1,0,0,0,0,0,1,0,2,0,2,2,0,3,1,0,0,1,0,1,1,0,1,2,0,3,0,0,0,0,1,0,0,3,3,4,3,1,0,1,0,3,0,2 },
        { 0,0,0,3,0,5,0,0,0,0,1,0,2,0,3,1,0,1,3,0,0,0,2,0,0,0,1,0,0,0,1,1,0,0,4,0,0,0,2,3,0,1,4,1,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,0,0,0,0,1,0,0,0,0,0,0,0,2,0,0,3,0,0,0,0,0,3 },
        { 0,2,0,5,0,5,0,1,0,2,4,3,3,2,5,1,3,2,3,3,3,0,4,1,2,0,3,0,4,0,2,2,1,1,5,3,0,0,1,4,2,3,2,0,3,3,3,2,0,2,4,1,1,2,0,1,1,0,3,1,0,1,3,1,2,3,0,2,0,0,0,1,3,5,4,4,4,0,3,0,0,1,3 },
        { 0,4,0,5,0,4,0,4,0,4,5,4,3,3,4,3,3,3,4,3,4,4,5,3,4,5,4,2,4,2,3,4,3,1,4,4,1,3,5,4,4,5,5,4,4,5,5,5,2,3,3,1,4,3,1,3,3,0,3,3,1,4,3,4,4,4,0,3,0,4,0,3,3,4,4,5,0,0,4,3,0,4,5 },
        { 0,4,0,4,0,3,0,3,0,3,4,4,4,3,3,2,4,3,4,3,4,3,5,3,4,3,2,1,4,2,4,4,3,1,3,4,2,4,5,5,3,4,5,4,1,5,4,3,0,3,2,2,3,2,1,3,1,0,3,3,3,5,3,3,3,5,4,4,2,3,3,4,3,3,3,2,1,0,3,2,1,4,3 },
        { 0,4,0,5,0,4,0,3,0,3,5,5,3,2,4,3,4,0,5,4,4,1,4,4,4,3,3,3,4,3,5,5,2,3,3,4,1,2,5,5,3,5,5,2,3,5,5,4,0,3,2,0,3,3,1,1,5,1,4,1,0,4,3,2,3,5,0,4,0,3,0,5,4,3,4,3,0,0,4,1,0,4,4 },
        { 1,3,0,4,0,2,0,2,0,2,5,5,3,3,3,3,3,0,4,2,3,4,4,4,3,4,0,0,3,4,5,4,3,3,3,3,2,5,5,4,5,5,5,4,3,5,5,5,1,3,1,0,1,0,0,3,2,0,4,2,0,5,2,3,2,4,1,3,0,3,0,4,5,4,5,4,3,0,4,2,0,5,4 },
        { 0,3,0,4,0,5,0,3,0,3,4,4,3,2,3,2,3,3,3,3,3,2,4,3,3,2,2,0,3,3,3,3,3,1,3,3,3,0,4,4,3,4,4,1,1,4,4,2,0,3,1,0,1,1,0,4,1,0,2,3,1,3,3,1,3,4,0,3,0,1,0,3,1,3,0,0,1,0,2,0,0,4,4 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 },
        { 0,3,0,3,0,2,0,3,0,1,5,4,3,3,3,1,4,2,1,2,3,4,4,2,4,4,5,0,3,1,4,3,4,0,4,3,3,3,2,3,2,5,3,4,3,2,2,3,0,0,3,0,2,1,0,1,2,0,0,0,0,2,1,1,3,1,0,2,0,4,0,3,4,4,4,5,2,0,2,0,0,1,3 },
        { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,1,1,1,0,0,1,1,0,0,0,4,2,1,1,0,1,0,3,2,0,0,3,1,1,1,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,0,1,0,0,0,2,0,0,0,1,4,0,4,2,1,0,0,0,0,0,1 },
        { 0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,1,0,0,0,0,0,0,1,0,1,0,0,0,0,3,1,0,0,0,2,0,2,1,0,0,1,2,1,0,1,1,0,0,3,0,0,0,0,0,0,0,0,0,0,0,1,3,1,0,0,0,0,0,1,0,0,2,1,0,0,0,0,0,0,0,0,2 },
        { 0,4,0,4,0,4,0,3,0,4,4,3,4,2,4,3,2,0,4,4,4,3,5,3,5,3,3,2,4,2,4,3,4,3,1,4,0,2,3,4,4,4,3,3,3,4,4,4,3,4,1,3,4,3,2,1,2,1,3,3,3,4,4,3,3,5,0,4,0,3,0,4,3,3,3,2,1,0,3,0,0,3,3 },
        { 0,4,0,3,0,3,0,3,0,3,5,5,3,3,3,3,4,3,4,3,3,3,4,4,4,3,3,3,3,4,3,5,3,3,1,3,2,4,5,5,5,5,4,3,4,5,5,3,2,2,3,3,3,3,2,3,3,1,2,3,2,4,3,3,3,4,0,4,0,2,0,4,3,2,2,1,2,0,3,0,0,4,1}
    };
    */

    private static readonly byte[] _jp2CharContext_Compressed =
    {
        165, 153, 129, 182, 34, 57, 8, 68, 3, 36, 255, 255, 203, 75, 221, 34, 173, 190, 113, 246, 237, 57, 171,
        163, 211, 218, 109, 154, 64, 81, 20, 188, 149, 107, 30, 193, 123, 242, 138, 245, 246, 120, 157, 248, 249,
        200, 215, 233, 247, 131, 221, 207, 210, 107, 159, 202, 157, 149, 145, 187, 118, 102, 69, 86, 237, 221,
        159, 119, 156, 179, 247, 62, 145, 253, 255, 202, 90, 153, 171, 66, 43, 236, 170, 234, 83, 189, 116, 246,
        5, 85, 189, 208, 234, 143, 111, 22, 125, 59, 250, 227, 227, 143, 83, 223, 108, 223, 235, 96, 231, 217,
        167, 173, 171, 138, 221, 55, 62, 197, 93, 251, 168, 205, 233, 143, 135, 179, 189, 17, 219, 18, 209, 215,
        245, 243, 104, 31, 123, 247, 39, 46, 216, 88, 89, 191, 222, 243, 203, 227, 55, 67, 219, 190, 37, 39, 200,
        172, 190, 93, 246, 173, 183, 44, 168, 54, 191, 237, 172, 21, 125, 86, 86, 180, 91, 219, 210, 149, 177,
        228, 239, 144, 35, 79, 219, 203, 134, 142, 118, 152, 71, 241, 250, 98, 229, 255, 114, 163, 31, 55, 226,
        169, 224, 202, 166, 254, 34, 100, 76, 225, 178, 20, 84, 26, 10, 161, 208, 103, 27, 151, 196, 181, 191,
        239, 13, 180, 69, 253, 181, 214, 232, 8, 212, 156, 121, 89, 249, 139, 9, 255, 213, 66, 61, 234, 218, 217,
        225, 94, 194, 101, 63, 26, 138, 141, 203, 126, 9, 1, 29, 96, 57, 82, 184, 220, 152, 133, 59, 3, 116, 182,
        207, 5, 129, 208, 30, 101, 101, 200, 220, 37, 16, 9, 70, 0, 100, 11, 222, 253, 60, 5, 102, 20, 149, 220,
        224, 92, 95, 116, 120, 78, 40, 100, 90, 73, 105, 177, 193, 90, 27, 20, 91, 72, 211, 82, 189, 14, 54, 110,
        251, 82, 151, 245, 123, 232, 253, 20, 129, 110, 208, 233, 44, 80, 85, 132, 113, 161, 222, 19, 116, 10,
        187, 90, 178, 115, 143, 37, 219, 169, 117, 102, 219, 6, 209, 50, 140, 180, 100, 63, 58, 66, 66, 54, 24,
        57, 198, 216, 224, 172, 247, 126, 162, 55, 57, 22, 119, 232, 138, 213, 7, 234, 201, 130, 169, 243, 237,
        162, 165, 151, 174, 105, 111, 234, 72, 254, 193, 171, 190, 69, 17, 167, 192, 151, 138, 67, 202, 177, 253,
        177, 113, 192, 157, 74, 71, 248, 82, 75, 218, 147, 186, 241, 214, 62, 183, 55, 94, 152, 143, 55, 113,
        110, 165, 45, 75, 241, 140, 247, 45, 79, 149, 147, 89, 119, 210, 94, 121, 6, 247, 209, 129, 173, 11, 37,
        55, 46, 147, 45, 108, 143, 23, 38, 6, 180, 150, 58, 163, 175, 83, 95, 22, 191, 15, 112, 89, 196, 59, 21,
        241, 10, 54, 142, 139, 250, 67, 175, 190, 79, 47, 123, 48, 230, 176, 228, 4, 70, 8, 242, 150, 192, 142,
        130, 198, 190, 58, 60, 73, 144, 108, 229, 30, 115, 181, 240, 6, 218, 58, 150, 45, 55, 89, 228, 214, 101,
        67, 13, 126, 109, 42, 122, 117, 156, 189, 240, 223, 90, 182, 242, 24, 234, 142, 244, 41, 72, 88, 71, 121,
        20, 253, 93, 142, 121, 65, 193, 248, 216, 91, 134, 119, 101, 28, 100, 45, 78, 9, 40, 56, 151, 141, 98,
        175, 142, 184, 182, 38, 218, 78, 121, 104, 25, 117, 248, 177, 111, 186, 72, 22, 60, 170, 223, 224, 76,
        126, 173, 224, 14, 19, 221, 132, 116, 34, 96, 221, 224, 178, 55, 37, 147, 197, 202, 128, 64, 151, 8, 95,
        99, 104, 42, 134, 138, 55, 75, 78, 161, 120, 139, 184, 46, 42, 123, 191, 188, 1, 156, 151, 2, 128, 14,
        41, 56, 114, 200, 205, 158, 176, 69, 73, 17, 162, 12, 117, 210, 53, 135, 65, 80, 131, 76, 231, 248, 60,
        237, 166, 35, 206, 109, 19, 187, 156, 117, 142, 31, 190, 156, 13, 20, 78, 21, 253, 246, 171, 111, 183,
        201, 47, 45, 121, 128, 207, 108, 92, 87, 146, 57, 101, 40, 106, 63, 227, 75, 0, 164, 252, 4, 62, 129,
        237, 97, 43, 185, 68, 185, 183, 183, 147, 112, 242, 123, 124, 41, 166, 45, 103, 209, 134, 196, 156, 67,
        189, 131, 163, 154, 44, 159, 70, 58, 220, 250, 49, 149, 132, 31, 221, 162, 219, 5, 247, 76, 13, 95, 175,
        252, 18, 91, 18, 113, 21, 145, 157, 17, 143, 149, 36, 232, 194, 185, 83, 199, 143, 9, 213, 135, 133, 47,
        185, 238, 177, 178, 12, 29, 1, 21, 244, 46, 156, 238, 248, 110, 109, 104, 25, 131, 218, 251, 82, 232, 22,
        20, 32, 102, 137, 129, 208, 225, 242, 156, 164, 9, 101, 10, 46, 170, 121, 155, 168, 47, 170, 162, 60,
        191, 68, 54, 113, 207, 197, 135, 168, 81, 221, 242, 65, 13, 1, 79, 209, 197, 31, 2, 98, 58, 163, 229,
        242, 237, 240, 183, 29, 226, 110, 225, 78, 171, 186, 74, 0, 57, 37, 202, 126, 9, 24, 167, 139, 150, 84,
        201, 17, 83, 155, 35, 157, 173, 112, 168, 169, 73, 43, 187, 28, 58, 199, 71, 123, 169, 162, 219, 13, 23,
        207, 105, 84, 130, 76, 104, 209, 180, 227, 250, 213, 46, 163, 14, 185, 194, 184, 10, 129, 149, 141, 231,
        3, 125, 115, 228, 68, 73, 50, 161, 98, 205, 201, 139, 75, 109, 237, 152, 134, 99, 79, 46, 201, 255, 97,
        100, 233, 31, 252, 231, 108, 140, 9, 15, 96, 22, 13, 66, 27, 130, 23, 121, 99, 9, 35, 32, 91, 102, 145,
        111, 114, 120, 168, 126, 109, 83, 125, 170, 226, 233, 60, 89, 32, 15, 84, 154, 16, 116, 140, 91, 75, 49,
        28, 95, 214, 26, 110, 9, 115, 246, 68, 156, 140, 135, 114, 214, 16, 54, 185, 52, 129, 126, 248, 40, 249,
        117, 12, 66, 149, 167, 209, 190, 12, 213, 113, 234, 199, 20, 222, 61, 188, 212, 33, 158, 29, 28, 115,
        189, 31, 41, 7, 54, 127, 66, 175, 7, 149, 136, 36, 219, 220, 230, 234, 75, 22, 57, 254, 69, 108, 179,
        103, 34, 30, 217, 94, 255, 42, 17, 197, 131, 157, 225, 221, 178, 70, 120, 145, 91, 62, 228, 70, 17, 224,
        206, 145, 15, 208, 5, 35, 169, 190, 235, 156, 48, 223, 77, 69, 179, 39, 168, 107, 202, 144, 12, 203, 44,
        120, 200, 32, 82, 237, 106, 241, 113, 182, 10, 146, 66, 123, 192, 173, 68, 12, 59, 72, 130, 39, 102, 231,
        54, 71, 217, 18, 186, 210, 88, 69, 94, 202, 36, 106, 152, 53, 81, 32, 172, 123, 33, 93, 188, 31, 223, 89,
        192, 112, 46, 145, 172, 117, 229, 127, 27, 1, 100, 17, 100, 162, 84, 49, 165, 64, 20, 150, 89, 8, 37,
        249, 178, 111, 182, 253, 144, 195, 144, 78, 114, 167, 191, 177, 241, 65, 230, 174, 147, 83, 206, 36, 132,
        144, 68, 214, 234, 231, 157, 47, 1, 185, 147, 50, 204, 16, 166, 30, 83, 188, 86, 86, 130, 36, 41, 42,
        214, 169, 43, 6, 23, 98, 240, 184, 156, 157, 117, 159, 69, 219, 96, 34, 70, 192, 108, 243, 133, 56, 8,
        128, 29, 25, 125, 106, 138, 46, 37, 28, 217, 73, 163, 83, 35, 6, 181, 219, 199, 151, 41, 128, 105, 123,
        135, 64, 236, 131, 214, 236, 96, 132, 125, 233, 18, 47, 234, 9, 179, 230, 66, 194, 30, 72, 184, 221, 133,
        47, 73, 118, 248, 80, 33, 88, 178, 78, 49, 179, 118, 91, 236, 176, 76, 223, 87, 11, 77, 130, 175, 71,
        185, 205, 121, 216, 45, 21, 201, 97, 117, 211, 134, 85, 51, 242, 165, 92, 162, 145, 115, 18, 48, 176, 8,
        133, 109, 123, 141, 188, 146, 48, 93, 247, 116, 198, 98, 82, 21, 125, 60, 169, 132, 68, 80, 243, 10, 60,
        39, 87, 168, 38, 30, 16, 242, 18, 131, 98, 134, 3, 235, 160, 102, 229, 214, 172, 7, 68, 251, 12, 212,
        183, 83, 170, 49, 21, 83, 201, 183, 203, 151, 144, 31, 168, 224, 35, 26, 189, 184, 220, 164, 12, 215, 5,
        206, 115, 120, 188, 100, 142, 212, 114, 79, 96, 106, 91, 80, 228, 114, 7, 228, 86, 45, 76, 26, 128, 252,
        150, 131, 69, 27, 32, 93, 168, 224, 34, 28, 167, 59, 187, 45, 77, 198, 28, 198, 186, 4, 166, 154, 171,
        138, 15, 61, 10, 43, 127, 118, 64, 243, 49, 239, 81, 229, 163, 130, 169, 195, 72, 49, 229, 27, 205, 15,
        220, 187, 70, 195, 74, 118, 41, 90, 143, 86, 47, 154, 73, 181, 72, 42, 173, 92, 225, 92, 167, 114, 81,
        122, 51, 220, 190, 61, 247, 176, 3, 6, 61, 128, 219, 55, 112, 85, 182, 105, 240, 182, 160, 33, 73, 17,
        207, 78, 230, 130, 68, 141, 221, 173, 91, 233, 66, 116, 202, 192, 252, 177, 241, 87, 5, 247, 18, 86, 18,
        23, 171, 207, 198, 225, 202, 130, 149, 221, 121, 24, 120, 40, 113, 244, 20, 90, 125, 22, 103, 251, 24,
        22, 252, 94, 73, 20, 111, 146, 117, 250, 158, 241, 0, 5, 43, 103, 63, 246, 37, 2, 205, 130, 220, 86, 142,
        24, 9, 10, 56, 253, 136, 59, 200, 31, 157, 238, 183, 25, 139, 119, 114, 161, 240, 47, 253, 110, 196, 13,
        125, 78, 66, 98, 177, 44, 137, 201, 207, 176, 1, 185, 215, 244, 45, 210, 149, 188, 217, 22, 187, 49, 225,
        15, 14, 145, 177, 148, 95, 119, 102, 238, 139, 8, 28, 9, 172, 170, 15, 20, 42, 204, 36, 244, 74, 81, 249,
        216, 61, 54, 109, 214, 69, 164, 157, 100, 163, 249, 54, 136, 136, 47, 27, 139, 117, 165, 228, 236, 238,
        94, 243, 197, 3, 241, 92, 19, 222, 231, 170, 161, 153, 101, 157, 139, 121, 104, 43, 48, 57, 243, 158,
        237, 110, 47, 38, 238, 211, 231, 78, 147, 178, 45, 102, 47, 212, 151, 87, 185, 250, 156, 174, 97, 114,
        96, 216, 46, 24, 117, 188, 89, 181, 189, 129, 164, 139, 14, 148, 205, 120, 101, 221, 120, 198, 72, 147,
        73, 140, 7, 234, 55, 199, 243, 201, 140, 245, 1, 245, 249, 239, 166, 84, 229, 122, 24, 211, 213, 96, 187,
        191, 179, 24, 68, 109, 196, 140, 182, 152, 102, 169, 30, 195, 12, 106, 64, 151, 186, 2, 75, 86, 38, 17,
        110, 175, 246, 100, 143, 19, 223, 131, 156, 180, 36, 75, 55, 246, 242, 196, 161, 198, 173, 230, 203, 152,
        89, 9, 62, 95, 236, 54, 183, 243, 203, 96, 175, 61, 2, 109, 150, 196, 105, 104, 161, 164, 6, 72, 191,
        231, 123, 71, 177, 225, 176, 153, 12, 234, 32, 115, 250, 158, 105, 212, 158, 142, 98, 150, 39, 48, 238,
        198, 61, 169, 144, 52, 19, 131, 187, 250, 68, 78, 142, 15, 218, 33, 132, 240, 184, 36, 223, 71, 79, 181,
        222, 135, 58, 240, 131, 139, 197, 40, 231, 110, 105, 168, 168, 106, 248, 166, 80, 140, 16, 6, 68, 150, 6,
        82, 13, 42, 232, 65, 43, 245, 246, 168, 39, 142, 93, 64, 230, 113, 158, 32, 255, 50, 68, 220, 175, 132,
        120, 154, 148, 146, 186, 128, 199, 182, 55, 78, 120, 54, 131, 165, 219, 164, 92, 43, 201, 238, 156, 20,
        144, 89, 233, 65, 132, 114, 250, 47, 86, 214, 23, 219, 198, 136, 138, 239, 230, 190, 183, 85, 68, 156,
        164, 113, 110, 17, 100, 58, 156, 120, 166, 6, 162, 79, 122, 191, 156, 95, 79, 132, 52, 212, 184, 253, 56,
        66, 102, 69, 125, 112, 228, 107, 154, 249, 242, 224, 227, 212, 107, 111, 229, 135, 61, 63, 79, 175, 229,
        46, 20, 127, 62, 131, 8, 59, 143, 118, 7, 181, 49, 99, 17, 34, 190, 63, 35, 142, 60, 38, 139, 203, 125,
        143, 196, 209, 122, 6, 121, 8, 190, 81, 166, 51, 61, 72, 143, 241, 192, 214, 25, 188, 34, 17, 103, 242,
        54, 205, 218, 52, 98, 7, 177, 85, 53, 253, 68, 255, 239, 229, 152, 52, 236, 153, 123, 161, 88, 70, 117,
        157, 188, 237, 191, 23, 14, 166, 62, 124, 69, 202, 66, 142, 246, 229, 249, 232, 33, 245, 26, 37, 218,
        194, 121, 26, 62, 171, 175, 69, 243, 194, 16, 65, 151, 172, 43, 233, 183, 221, 86, 194, 178, 57, 101,
        186, 158, 53, 90, 253, 48, 112, 98, 2, 186, 152, 128, 132, 139, 210, 197, 103, 198, 76, 116, 244, 207,
        109, 18, 191, 63, 104, 213, 195, 8, 118, 63, 67, 112, 245, 92, 114, 154, 6, 10, 12, 28, 94, 221, 89, 152,
        96, 168, 118, 214, 151, 211, 80, 57, 127, 93, 201, 10, 154, 138, 191, 20, 218, 255, 247, 152, 177, 237,
        114, 247, 230, 137, 215, 30, 146, 35, 3, 221, 67, 38, 177, 31, 13, 56, 19, 139, 229, 63, 138, 12, 143,
        237, 209, 156, 53, 133, 145, 247, 186, 165, 116, 121, 126, 254, 140, 47, 168, 21, 53, 99, 203, 183, 191,
        200, 32, 151, 214, 84, 177, 207, 29, 191, 52, 226, 90, 235, 14, 22, 124, 226, 89, 100, 197, 143, 82, 251,
        246, 161, 126, 126, 116, 196, 227, 48, 193, 7, 153, 225, 1, 207, 109, 248, 98, 230, 19, 121, 152, 132,
        46, 211, 208, 242, 220, 221, 52, 130, 108, 135, 223, 60, 241, 158, 230, 185, 94, 51, 117, 255, 97, 134,
        58, 230, 209, 211, 153, 158, 114, 231, 180, 150, 6, 188, 203, 159, 144, 194, 181, 72, 180, 248, 7
    };
    private static readonly byte[,] _jp2CharContext;

    static JapaneseContextAnalyser()
    {
        byte[] temp = Utils.Decompress(_jp2CharContext_Compressed, 83 * 83);

        _jp2CharContext = new byte[83, 83];

        int index = 0;
        for (int y = 0; y < 83; y++)
        {
            for (int x = 0; x < 83; x++)
            {
                _jp2CharContext[x, y] = temp[index];
                index++;
            }
        }

        _jp2CharContext_Compressed = Array.Empty<byte>();
    }

    // category counters, each integer counts sequence in its category
    private readonly int[] _relSample = new int[CATEGORIES_NUM];

    // total sequence received
    private int _totalRel;

    // The order of previous char
    private int _lastCharOrder;

    // If this flag is set to true, detection is done and conclusion has
    // been made
    private bool _done;

    protected JapaneseContextAnalyser()
    {
        Reset();
    }

    internal float GetConfidence()
    {
        // This is just one way to calculate confidence. It works well for me.
        if (_totalRel > MINIMUM_DATA_THRESHOLD)
        {
            return (float)(_totalRel - _relSample[0]) / _totalRel;
        }
        else
        {
            return DONT_KNOW;
        }
    }

    internal void HandleOneChar(byte[] buf, int offset, int charLen)
    {
        if (_totalRel > MAX_REL_THRESHOLD)
        {
            _done = true;
        }

        if (_done)
        {
            return;
        }

        // Only 2-bytes characters are of our interest
        int order = charLen == 2 ? GetOrder(buf, offset) : -1;
        if (order != -1 && _lastCharOrder != -1)
        {
            _totalRel++;
            // count this sequence to its category counter
            _relSample[_jp2CharContext[_lastCharOrder, order]]++;
        }
        _lastCharOrder = order;
    }

    internal void Reset()
    {
        _totalRel = 0;
        for (int i = 0; i < CATEGORIES_NUM; i++)
        {
            _relSample[i] = 0;
        }

        _lastCharOrder = -1;
        _done = false;
    }

    protected abstract int GetOrder(byte[] buf, int offset);

    internal bool GotEnoughData()
    {
        return _totalRel > ENOUGH_REL_THRESHOLD;
    }
}

internal sealed class SJISContextAnalyser : JapaneseContextAnalyser
{
    private const byte HIRAGANA_FIRST_BYTE = 0x82;

    protected override int GetOrder(byte[] buf, int offset)
    {
        // We are only interested in Hiragana
        if (buf[offset] == HIRAGANA_FIRST_BYTE)
        {
            byte low = buf[offset + 1];
            if (low is >= 0x9F and <= 0xF1)
            {
                return low - 0x9F;
            }
        }
        return -1;
    }
}

internal sealed class EUCJPContextAnalyser : JapaneseContextAnalyser
{
    private const byte HIRAGANA_FIRST_BYTE = 0xA4;

    protected override int GetOrder(byte[] buf, int offset)
    {
        // We are only interested in Hiragana
        if (buf[offset] == HIRAGANA_FIRST_BYTE)
        {
            byte low = buf[offset + 1];
            if (low is >= 0xA1 and <= 0xF3)
            {
                return low - 0xA1;
            }
        }
        return -1;
    }
}

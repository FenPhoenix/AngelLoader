#define FenGen_LanguageSupportDest

using System;
using static AL_Common.Common;
using static AngelLoader.FenGenAttributes;

namespace AngelLoader
{
    [FenGenLanguageSupportDestClass]
    public static partial class LanguageSupport
    {
        #region Autogenerated language support code

        public static int SupportedLanguageCount = Enum.GetValues(typeof(LanguageIndex)).Length;

        public enum LanguageIndex : uint
        {
            English,
            Czech,
            Dutch,
            French,
            German,
            Hungarian,
            Italian,
            Japanese,
            Polish,
            Russian,
            Spanish
        }

        public static readonly string[] SupportedLanguages =
        {
            "english",
            "czech",
            "dutch",
            "french",
            "german",
            "hungarian",
            "italian",
            "japanese",
            "polish",
            "russian",
            "spanish"
        };

        public static HashSetI LangsHash = new HashSetI(11)
        {
            "english",
            "czech",
            "dutch",
            "french",
            "german",
            "hungarian",
            "italian",
            "japanese",
            "polish",
            "russian",
            "spanish"
        };

        public static string[] FSPrefixedLangs =
        {
            "/english",
            "/czech",
            "/dutch",
            "/french",
            "/german",
            "/hungarian",
            "/italian",
            "/japanese",
            "/polish",
            "/russian",
            "/spanish"
        };

        public static DictionaryI<Language> LangStringsToEnums = new(11)
        {
            { "english", Language.English },
            { "czech", Language.Czech },
            { "dutch", Language.Dutch },
            { "french", Language.French },
            { "german", Language.German },
            { "hungarian", Language.Hungarian },
            { "italian", Language.Italian },
            { "japanese", Language.Japanese },
            { "polish", Language.Polish },
            { "russian", Language.Russian },
            { "spanish", Language.Spanish }
        };

        public static DictionaryI<string[]> LangCodes = new DictionaryI<string[]>(11)
        {
            { "english", new[] { "en" } },
            { "czech", new[] { "cz" } },
            { "dutch", new[] { "nl" } },
            { "french", new[] { "fr" } },
            { "german", new[] { "de" } },
            { "hungarian", new[] { "hu" } },
            { "italian", new[] { "it" } },
            { "japanese", new[] { "ja", "jp" } },
            { "polish", new[] { "pl" } },
            { "russian", new[] { "ru" } },
            { "spanish", new[] { "es" } }
        };

        public static DictionaryI<string> LangTranslatedNames = new DictionaryI<string>(11)
        {
            { "english", "English" },
            { "czech", "Čeština" },
            { "dutch", "Nederlands" },
            { "french", "Français" },
            { "german", "Deutsch" },
            { "hungarian", "Magyar" },
            { "italian", "Italiano" },
            { "japanese", "日本語" },
            { "polish", "Polski" },
            { "russian", "Русский" },
            { "spanish", "Español" }
        };

        /// <summary>
        /// Converts a Language to a LanguageIndex. *Narrowing conversion, so make sure the language has been checked for convertibility first!
        /// </summary>
        /// <param name="language"></param>
        public static LanguageIndex LanguageToLanguageIndex(Language language)
        {
            Misc.AssertR(language != Language.Default, nameof(language) + " was out of range: " + language);

            return language switch
            {
                Language.English => LanguageIndex.English,
                Language.Czech => LanguageIndex.Czech,
                Language.Dutch => LanguageIndex.Dutch,
                Language.French => LanguageIndex.French,
                Language.German => LanguageIndex.German,
                Language.Hungarian => LanguageIndex.Hungarian,
                Language.Italian => LanguageIndex.Italian,
                Language.Japanese => LanguageIndex.Japanese,
                Language.Polish => LanguageIndex.Polish,
                Language.Russian => LanguageIndex.Russian,
                _ => LanguageIndex.Spanish
            };
        }
        /// <summary>
        /// Converts a LanguageIndex to a Language. Widening conversion, so it will always succeed.
        /// </summary>
        /// <param name="languageIndex"></param>
        public static Language LanguageIndexToLanguage(LanguageIndex languageIndex) => languageIndex switch
        {
            LanguageIndex.English => Language.English,
            LanguageIndex.Czech => Language.Czech,
            LanguageIndex.Dutch => Language.Dutch,
            LanguageIndex.French => Language.French,
            LanguageIndex.German => Language.German,
            LanguageIndex.Hungarian => Language.Hungarian,
            LanguageIndex.Italian => Language.Italian,
            LanguageIndex.Japanese => Language.Japanese,
            LanguageIndex.Polish => Language.Polish,
            LanguageIndex.Russian => Language.Russian,
            _ => Language.Spanish
        };

        public static string GetLanguageString(LanguageIndex index) => SupportedLanguages[(uint)index];

        public static string GetLanguageStringUnsafe(Language language) => SupportedLanguages[(uint)LanguageToLanguageIndex(language)];

        #endregion
    }
}

#define FenGen_LocalizationDest

// These are for the reflection-style codegen in case it's enabled. If it's disabled, these aren't necessary, but
// I still want to keep them around so I don't have to keep adding them back.
#pragma warning disable IDE0005 // Using directive is unnecessary.
// ReSharper disable once RedundantUsingDirective
using System.Collections.Generic;
// ReSharper disable once RedundantUsingDirective
using System.Reflection;
#pragma warning restore IDE0005 // Using directive is unnecessary.

using System.IO;
using System.Text;
using AngelLoader.DataClasses;
using JetBrains.Annotations;
using static AngelLoader.Attributes;

/*
 New cached reflection method (2020-07-31):
 -exe size: -20K
 -aggregate time taken on startup call for 500 calls: +25%
 -single-run time taken on startup call (with in-code Stopwatch): -62% (~5.5 new vs ~14.5 old)
 -single-run time taken on Settings form call (with in-code Stopwatch): about equal
 -Both old and new methods are unmeasurably fast (with the profiler) for a single call, so I'm good with this tradeoff.
*/

namespace AngelLoader
{
    [FenGenLocalizationDestClass]
    internal static partial class Ini
    {
        // This method was autogenerated for maximum performance at runtime.
        [MustUseReturnValue]
        internal static LText_Class ReadLocalizationIni(string file)
        {
            #region Dictionary setup

            const BindingFlags _bfLText = BindingFlags.Instance | BindingFlags.NonPublic;

            var metaFields = typeof(LText_Class.Meta_Class).GetFields(_bfLText);
            var Meta_Dict = new Dictionary<string, FieldInfo>(metaFields.Length);
            foreach (var f in metaFields)
            {
                Meta_Dict.Add(f.Name, f);
            }
            var globalFields = typeof(LText_Class.Global_Class).GetFields(_bfLText);
            var Global_Dict = new Dictionary<string, FieldInfo>(globalFields.Length);
            foreach (var f in globalFields)
            {
                Global_Dict.Add(f.Name, f);
            }
            var splashScreenFields = typeof(LText_Class.SplashScreen_Class).GetFields(_bfLText);
            var SplashScreen_Dict = new Dictionary<string, FieldInfo>(splashScreenFields.Length);
            foreach (var f in splashScreenFields)
            {
                SplashScreen_Dict.Add(f.Name, f);
            }
            var browseDialogsFields = typeof(LText_Class.BrowseDialogs_Class).GetFields(_bfLText);
            var BrowseDialogs_Dict = new Dictionary<string, FieldInfo>(browseDialogsFields.Length);
            foreach (var f in browseDialogsFields)
            {
                BrowseDialogs_Dict.Add(f.Name, f);
            }
            var alertMessagesFields = typeof(LText_Class.AlertMessages_Class).GetFields(_bfLText);
            var AlertMessages_Dict = new Dictionary<string, FieldInfo>(alertMessagesFields.Length);
            foreach (var f in alertMessagesFields)
            {
                AlertMessages_Dict.Add(f.Name, f);
            }
            var mainMenuFields = typeof(LText_Class.MainMenu_Class).GetFields(_bfLText);
            var MainMenu_Dict = new Dictionary<string, FieldInfo>(mainMenuFields.Length);
            foreach (var f in mainMenuFields)
            {
                MainMenu_Dict.Add(f.Name, f);
            }
            var aboutWindowFields = typeof(LText_Class.AboutWindow_Class).GetFields(_bfLText);
            var AboutWindow_Dict = new Dictionary<string, FieldInfo>(aboutWindowFields.Length);
            foreach (var f in aboutWindowFields)
            {
                AboutWindow_Dict.Add(f.Name, f);
            }
            var gameVersionsWindowFields = typeof(LText_Class.GameVersionsWindow_Class).GetFields(_bfLText);
            var GameVersionsWindow_Dict = new Dictionary<string, FieldInfo>(gameVersionsWindowFields.Length);
            foreach (var f in gameVersionsWindowFields)
            {
                GameVersionsWindow_Dict.Add(f.Name, f);
            }
            var fMDeletionFields = typeof(LText_Class.FMDeletion_Class).GetFields(_bfLText);
            var FMDeletion_Dict = new Dictionary<string, FieldInfo>(fMDeletionFields.Length);
            foreach (var f in fMDeletionFields)
            {
                FMDeletion_Dict.Add(f.Name, f);
            }
            var difficultiesFields = typeof(LText_Class.Difficulties_Class).GetFields(_bfLText);
            var Difficulties_Dict = new Dictionary<string, FieldInfo>(difficultiesFields.Length);
            foreach (var f in difficultiesFields)
            {
                Difficulties_Dict.Add(f.Name, f);
            }
            var filterBarFields = typeof(LText_Class.FilterBar_Class).GetFields(_bfLText);
            var FilterBar_Dict = new Dictionary<string, FieldInfo>(filterBarFields.Length);
            foreach (var f in filterBarFields)
            {
                FilterBar_Dict.Add(f.Name, f);
            }
            var fMsListFields = typeof(LText_Class.FMsList_Class).GetFields(_bfLText);
            var FMsList_Dict = new Dictionary<string, FieldInfo>(fMsListFields.Length);
            foreach (var f in fMsListFields)
            {
                FMsList_Dict.Add(f.Name, f);
            }
            var statisticsTabFields = typeof(LText_Class.StatisticsTab_Class).GetFields(_bfLText);
            var StatisticsTab_Dict = new Dictionary<string, FieldInfo>(statisticsTabFields.Length);
            foreach (var f in statisticsTabFields)
            {
                StatisticsTab_Dict.Add(f.Name, f);
            }
            var editFMTabFields = typeof(LText_Class.EditFMTab_Class).GetFields(_bfLText);
            var EditFMTab_Dict = new Dictionary<string, FieldInfo>(editFMTabFields.Length);
            foreach (var f in editFMTabFields)
            {
                EditFMTab_Dict.Add(f.Name, f);
            }
            var commentTabFields = typeof(LText_Class.CommentTab_Class).GetFields(_bfLText);
            var CommentTab_Dict = new Dictionary<string, FieldInfo>(commentTabFields.Length);
            foreach (var f in commentTabFields)
            {
                CommentTab_Dict.Add(f.Name, f);
            }
            var tagsTabFields = typeof(LText_Class.TagsTab_Class).GetFields(_bfLText);
            var TagsTab_Dict = new Dictionary<string, FieldInfo>(tagsTabFields.Length);
            foreach (var f in tagsTabFields)
            {
                TagsTab_Dict.Add(f.Name, f);
            }
            var patchTabFields = typeof(LText_Class.PatchTab_Class).GetFields(_bfLText);
            var PatchTab_Dict = new Dictionary<string, FieldInfo>(patchTabFields.Length);
            foreach (var f in patchTabFields)
            {
                PatchTab_Dict.Add(f.Name, f);
            }
            var readmeAreaFields = typeof(LText_Class.ReadmeArea_Class).GetFields(_bfLText);
            var ReadmeArea_Dict = new Dictionary<string, FieldInfo>(readmeAreaFields.Length);
            foreach (var f in readmeAreaFields)
            {
                ReadmeArea_Dict.Add(f.Name, f);
            }
            var playOriginalGameMenuFields = typeof(LText_Class.PlayOriginalGameMenu_Class).GetFields(_bfLText);
            var PlayOriginalGameMenu_Dict = new Dictionary<string, FieldInfo>(playOriginalGameMenuFields.Length);
            foreach (var f in playOriginalGameMenuFields)
            {
                PlayOriginalGameMenu_Dict.Add(f.Name, f);
            }
            var mainButtonsFields = typeof(LText_Class.MainButtons_Class).GetFields(_bfLText);
            var MainButtons_Dict = new Dictionary<string, FieldInfo>(mainButtonsFields.Length);
            foreach (var f in mainButtonsFields)
            {
                MainButtons_Dict.Add(f.Name, f);
            }
            var progressBoxFields = typeof(LText_Class.ProgressBox_Class).GetFields(_bfLText);
            var ProgressBox_Dict = new Dictionary<string, FieldInfo>(progressBoxFields.Length);
            foreach (var f in progressBoxFields)
            {
                ProgressBox_Dict.Add(f.Name, f);
            }
            var settingsWindowFields = typeof(LText_Class.SettingsWindow_Class).GetFields(_bfLText);
            var SettingsWindow_Dict = new Dictionary<string, FieldInfo>(settingsWindowFields.Length);
            foreach (var f in settingsWindowFields)
            {
                SettingsWindow_Dict.Add(f.Name, f);
            }
            var dateFilterBoxFields = typeof(LText_Class.DateFilterBox_Class).GetFields(_bfLText);
            var DateFilterBox_Dict = new Dictionary<string, FieldInfo>(dateFilterBoxFields.Length);
            foreach (var f in dateFilterBoxFields)
            {
                DateFilterBox_Dict.Add(f.Name, f);
            }
            var tagsFilterBoxFields = typeof(LText_Class.TagsFilterBox_Class).GetFields(_bfLText);
            var TagsFilterBox_Dict = new Dictionary<string, FieldInfo>(tagsFilterBoxFields.Length);
            foreach (var f in tagsFilterBoxFields)
            {
                TagsFilterBox_Dict.Add(f.Name, f);
            }
            var ratingFilterBoxFields = typeof(LText_Class.RatingFilterBox_Class).GetFields(_bfLText);
            var RatingFilterBox_Dict = new Dictionary<string, FieldInfo>(ratingFilterBoxFields.Length);
            foreach (var f in ratingFilterBoxFields)
            {
                RatingFilterBox_Dict.Add(f.Name, f);
            }
            var importingFields = typeof(LText_Class.Importing_Class).GetFields(_bfLText);
            var Importing_Dict = new Dictionary<string, FieldInfo>(importingFields.Length);
            foreach (var f in importingFields)
            {
                Importing_Dict.Add(f.Name, f);
            }
            var scanAllFMsBoxFields = typeof(LText_Class.ScanAllFMsBox_Class).GetFields(_bfLText);
            var ScanAllFMsBox_Dict = new Dictionary<string, FieldInfo>(scanAllFMsBoxFields.Length);
            foreach (var f in scanAllFMsBoxFields)
            {
                ScanAllFMsBox_Dict.Add(f.Name, f);
            }
            var characterEncodingFields = typeof(LText_Class.CharacterEncoding_Class).GetFields(_bfLText);
            var CharacterEncoding_Dict = new Dictionary<string, FieldInfo>(characterEncodingFields.Length);
            foreach (var f in characterEncodingFields)
            {
                CharacterEncoding_Dict.Add(f.Name, f);
            }

            #endregion

            var ret = new LText_Class();
            string[] lines = File.ReadAllLines(file, Encoding.UTF8);
            int linesLength = lines.Length;
            for (int i = 0; i < linesLength; i++)
            {
                string lineT = lines[i].Trim();
                if (lineT == "[Meta]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (Meta_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.Meta, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[Global]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (Global_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.Global, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[SplashScreen]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (SplashScreen_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.SplashScreen, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[BrowseDialogs]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (BrowseDialogs_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.BrowseDialogs, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[AlertMessages]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (AlertMessages_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.AlertMessages, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[MainMenu]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (MainMenu_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.MainMenu, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[AboutWindow]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (AboutWindow_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.AboutWindow, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[GameVersionsWindow]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (GameVersionsWindow_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.GameVersionsWindow, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[FMDeletion]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (FMDeletion_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.FMDeletion, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[Difficulties]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (Difficulties_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.Difficulties, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[FilterBar]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (FilterBar_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.FilterBar, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[FMsList]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (FMsList_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.FMsList, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[StatisticsTab]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (StatisticsTab_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.StatisticsTab, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[EditFMTab]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (EditFMTab_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.EditFMTab, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[CommentTab]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (CommentTab_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.CommentTab, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[TagsTab]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (TagsTab_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.TagsTab, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[PatchTab]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (PatchTab_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.PatchTab, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[ReadmeArea]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (ReadmeArea_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.ReadmeArea, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[PlayOriginalGameMenu]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (PlayOriginalGameMenu_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.PlayOriginalGameMenu, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[MainButtons]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (MainButtons_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.MainButtons, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[ProgressBox]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (ProgressBox_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.ProgressBox, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[SettingsWindow]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (SettingsWindow_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.SettingsWindow, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[DateFilterBox]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (DateFilterBox_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.DateFilterBox, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[TagsFilterBox]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (TagsFilterBox_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.TagsFilterBox, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[RatingFilterBox]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (RatingFilterBox_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.RatingFilterBox, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[Importing]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (Importing_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.Importing, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[ScanAllFMsBox]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (ScanAllFMsBox_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.ScanAllFMsBox, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
                else if (lineT == "[CharacterEncoding]")
                {
                    while (i < linesLength - 1)
                    {
                        int ltLength;
                        string lt = lines[i + 1].TrimStart();
                        int eqIndex = lt.IndexOf('=');
                        if (eqIndex > -1)
                        {
                            string key = lt.Substring(0, eqIndex);
                            if (CharacterEncoding_Dict.TryGetValue(key, out FieldInfo value))
                            {
                                value.SetValue(ret.CharacterEncoding, lt.Substring(eqIndex + 1));
                            }
                        }
                        else if ((ltLength = lt.Length) > 0 && lt[0] == '[')
                        {
                            break;
                        }
                        i++;
                    }
                }
            }

            return ret;
        }
    }
}

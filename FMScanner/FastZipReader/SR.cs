// Licensed to the .NET Foundation under one or more agreements.
// The .NET Foundation licenses this file to you under the MIT license.
// See the LICENSE file in the project root for more information.

using System.Runtime.CompilerServices;

namespace FMScanner.FastZipReader
{
    internal static class SR
    {
        #region Strings

        // I don't know how the heck this is supposed to work, but these fields must be autogenerated at some
        // point. I don't know where or how, so I autogenerated them myself. English-only of course, but... meh.
        // TODO: Figure out if these strings can be made translatable or whatever the heck you're supposed to do
        internal static string ArgumentOutOfRange_Enum = "Enum value was out of legal range.";
        internal static string ArgumentOutOfRange_NeedPosNum = "Positive number required.";
        internal static string CannotReadFromDeflateStream = "Reading from the compression stream is not supported.";
        internal static string CannotWriteToDeflateStream = "Writing to the compression stream is not supported.";
        internal static string GenericInvalidData = "Found invalid data while decoding.";
        internal static string InvalidArgumentOffsetCount = "Offset plus count is larger than the length of target array.";
        internal static string InvalidBeginCall = "Only one asynchronous reader or writer is allowed time at one time.";
        internal static string InvalidBlockLength = "Block length does not match with its complement.";
        internal static string InvalidHuffmanData = "Failed to construct a huffman tree using the length array. The stream might be corrupted.";
        internal static string NotSupported = "This operation is not supported.";
        internal static string NotSupported_UnreadableStream = "Stream does not support reading.";
        internal static string NotSupported_UnwritableStream = "Stream does not support writing.";
        internal static string ObjectDisposed_StreamClosed = "Cannot access a closed stream.";
        internal static string UnknownBlockType = "Unknown block type. Stream might be corrupted.";
        internal static string UnknownState = "Decoder is in some unknown state. This might be caused by corrupted data.";
        internal static string ZLibErrorDLLLoadError = "The underlying compression routine could not be loaded correctly.";
        internal static string ZLibErrorInconsistentStream = "The stream state of the underlying compression routine is inconsistent.";
        internal static string ZLibErrorIncorrectInitParameters = "The underlying compression routine received incorrect initialization parameters.";
        internal static string ZLibErrorNotEnoughMemory = "The underlying compression routine could not reserve sufficient memory.";
        internal static string ZLibErrorVersionMismatch = "The version of the underlying compression routine does not match expected version.";
        internal static string ZLibErrorUnexpected = "The underlying compression routine returned an unexpected error code.";
        internal static string ArgumentNeedNonNegative = "The argument must be non-negative.";
        internal static string CannotBeEmpty = "String cannot be empty.";
        internal static string CDCorrupt = "Central Directory corrupt.";
        internal static string CentralDirectoryInvalid = "Central Directory is invalid.";
        internal static string CreateInReadMode = "Cannot create entries on an archive opened in read mode.";
        internal static string CreateModeCapabilities = "Cannot use create mode on a non-writable stream.";
        internal static string CreateModeCreateEntryWhileOpen = "Entries cannot be created while previously created entries are still open.";
        internal static string CreateModeWriteOnceAndOneEntryAtATime = "Entries in create mode may only be written to once, and only one entry may be held open at a time.";
        internal static string DateTimeOutOfRange = "The DateTimeOffset specified cannot be converted into a Zip file timestamp.";
        internal static string DeletedEntry = "Cannot modify deleted entry.";
        internal static string DeleteOnlyInUpdate = "Delete can only be used when the archive is in Update mode.";
        internal static string DeleteOpenEntry = "Cannot delete an entry currently open for writing.";
        internal static string EntriesInCreateMode = "Cannot access entries in Create mode.";
        internal static string EntryNameEncodingNotSupported = "The specified entry name encoding is not supported.";
        internal static string EntryNamesTooLong = "Entry names cannot require more than 2^16 bits.";
        internal static string EntryTooLarge = "Entries larger than 4GB are not supported in Update mode.";
        internal static string EOCDNotFound = "End of Central Directory record could not be found.";
        internal static string FieldTooBigCompressedSize = "Compressed Size cannot be held in an Int64.";
        internal static string FieldTooBigLocalHeaderOffset = "Local Header Offset cannot be held in an Int64.";
        internal static string FieldTooBigNumEntries = "Number of Entries cannot be held in an Int64.";
        internal static string FieldTooBigOffsetToCD = "Offset to Central Directory cannot be held in an Int64.";
        internal static string FieldTooBigOffsetToZip64EOCD = "Offset to Zip64 End Of Central Directory record cannot be held in an Int64.";
        internal static string FieldTooBigStartDiskNumber = "Start Disk Number cannot be held in an Int64.";
        internal static string FieldTooBigUncompressedSize = "Uncompressed Size cannot be held in an Int64.";
        internal static string FrozenAfterWrite = "Cannot modify entry in Create mode after entry has been opened for writing.";
        internal static string HiddenStreamName = "A stream from ZipArchiveEntry has been disposed.";
        internal static string LengthAfterWrite = "Length properties are unavailable once an entry has been opened for writing.";
        internal static string LocalFileHeaderCorrupt = "A local file header is corrupt.";
        internal static string NumEntriesWrong = "Number of entries expected in End Of Central Directory does not correspond to number of entries in Central Directory.";
        internal static string OffsetLengthInvalid = "The offset and length parameters are not valid for the array that was given.";
        internal static string ReadingNotSupported = "This stream from ZipArchiveEntry does not support reading.";
        internal static string ReadModeCapabilities = "Cannot use read mode on a non-readable stream.";
        internal static string ReadOnlyArchive = "Cannot modify read-only archive.";
        internal static string SeekingNotSupported = "This stream from ZipArchiveEntry does not support seeking.";
        internal static string SetLengthRequiresSeekingAndWriting = "SetLength requires a stream that supports seeking and writing.";
        internal static string SplitSpanned = "Split or spanned archives are not supported.";
        internal static string UnexpectedEndOfStream = "Zip file corrupt: unexpected end of stream reached.";
        internal static string UnsupportedCompression = "The archive entry was compressed using an unsupported compression method.";
        internal static string UnsupportedCompressionMethod = "The archive entry was compressed using {0} and is not supported.";
        internal static string UpdateModeCapabilities = "Update mode requires a stream with read, write, and seek capabilities.";
        internal static string UpdateModeOneStream = "Entries cannot be opened multiple times in Update mode.";
        internal static string WritingNotSupported = "This stream from ZipArchiveEntry does not support writing.";
        internal static string Zip64EOCDNotWhereExpected = "Zip 64 End of Central Directory Record not where indicated.";
        internal static string Argument_InvalidPathChars = "Illegal characters in path '{0}'.";


        #endregion

        // This method is used to decide if we need to append the exception message parameters to the message when calling SR.Format. 
        // by default it returns false.
        // Native code generators can replace the value this returns based on user input at the time of native code generation.
        // Marked as NoInlining because if this is used in an AoT compiled app that is not compiled into a single file, the user
        // could compile each module with a different setting for this. We want to make sure there's a consistent behavior
        // that doesn't depend on which native module this method got inlined into.
        [MethodImpl(MethodImplOptions.NoInlining)]
        private static bool UsingResourceKeys()
        {
            return false;
        }

        internal static string Format(string resourceFormat, params object[] args)
        {
            if (args != null)
            {
                if (UsingResourceKeys())
                {
                    return resourceFormat + string.Join(", ", args);
                }

                return string.Format(resourceFormat, args);
            }

            return resourceFormat;
        }

        internal static string Format(string resourceFormat, object p1)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1);
            }

            return string.Format(resourceFormat, p1);
        }

        internal static string Format(string resourceFormat, object p1, object p2)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1, p2);
            }

            return string.Format(resourceFormat, p1, p2);
        }

        internal static string Format(string resourceFormat, object p1, object p2, object p3)
        {
            if (UsingResourceKeys())
            {
                return string.Join(", ", resourceFormat, p1, p2, p3);
            }

            return string.Format(resourceFormat, p1, p2, p3);
        }
    }
}
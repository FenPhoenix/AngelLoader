using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Build.Locator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.MSBuild;

namespace FenGen
{
    internal static class CommonStatic
    {
        internal static readonly string _solutionPath = Path.GetFullPath(Path.Combine(Application.StartupPath, @"..\..\..\..\"));
        internal static MSBuildWorkspace Workspace;
        internal static Solution Solution;
        internal static Project Project;
        internal static Compilation CU;
        internal static async Task InitWorkspaceStuff()
        {
            MSBuildLocator.RegisterDefaults();

            Workspace = MSBuildWorkspace.Create();

            Solution = await Workspace.OpenSolutionAsync(Path.Combine(_solutionPath, "AngelLoader.sln"));

            // Throw if we don't find it, it's kind of important
            Project = Solution.Projects.First(x => x.AssemblyName.EqualsI("AngelLoader"));

            CU = await Project.GetCompilationAsync();
        }

        internal const string AutogeneratedMessage =
            @"// This method was autogenerated for maximum performance at runtime.";

        internal const string TopCodeMessage = @"// This supporting code was autogenerated.";

        internal static readonly string[] Prefixes = { "private", "internal", "protected", "public", "static", "readonly", "dynamic" };

        internal static string StripPrefixes(string line)
        {
            while (Prefixes.Any(x => line.StartsWithI(x + ' ')))
            {
                foreach (var pre in Prefixes)
                {
                    if (line.StartsWithI(pre + ' '))
                    {
                        line = line.Substring(pre.Length + 1).TrimStart();
                    }
                }
            }
            return line;
        }

        internal static void ThrowErrorAndTerminate(string message)
        {
            Trace.WriteLine("FenGen: " + message + "\r\nTerminating FenGen.");
            MessageBox.Show(message + "\r\n\r\nExiting.", "Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            Environment.Exit(-999);
        }
    }
}

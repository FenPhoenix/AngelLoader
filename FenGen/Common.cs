using System;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using Microsoft.Build.Locator;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.MSBuild;

namespace FenGen
{
    internal static class CommonStatic
    {
        // PERF_TODO: Roslyn is so slow it's laughable. It takes 1.5 seconds just to run InitWorkspaceStuff() alone.
        // That's not even counting doing any actual work with it, which adds even more slug time.
        // PERF_TODO: Go back to manually doing it all, and just organize AL so the gen can find things without too much brittleness

        #region Roslyn

        // Class-level so it doesn't get disposed at the end of the init method
        private static MSBuildWorkspace _workspace;

        internal static Compilation CU;

        internal static async Task InitWorkspaceStuff()
        {
            MSBuildLocator.RegisterDefaults();

            _workspace = MSBuildWorkspace.Create();

            // Throw if we don't find it, it's kind of important
            var _project = await _workspace.OpenProjectAsync(Path.Combine(Core.ALProjectPath, "AngelLoader.csproj"));

            CU = await _project.GetCompilationAsync();
        }

        #endregion

        internal const string AutogeneratedMessage = @"// This method was autogenerated for maximum performance at runtime.";

        internal const string TopCodeMessage = @"// This supporting code was autogenerated.";

        private static readonly string[] Prefixes = { "private", "internal", "protected", "public", "static", "readonly", "dynamic" };
        internal static string StripPrefixes(string line)
        {
            while (Prefixes.Any(x => line.StartsWithI(x + ' ')))
            {
                foreach (var pre in Prefixes)
                {
                    if (line.StartsWithI(pre + ' '))
                    {
                        line = line.Substring(pre.Length + 1).TrimStart();
                    }
                }
            }
            return line;
        }

        internal static void ThrowErrorAndTerminate(string message)
        {
            Trace.WriteLine("FenGen: " + message + "\r\nTerminating FenGen.");
            MessageBox.Show(message + "\r\n\r\n" + @"Exiting.", @"Error", MessageBoxButtons.OK, MessageBoxIcon.Error);
            Environment.Exit(-999);
        }
    }
}
